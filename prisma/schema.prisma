// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  picture             String?
  email               String               @unique
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  resetPasswordTokens ResetPasswordToken[]
  debtors             Debtor[]
  creditCards         CreditCard[]
  bills               Bill[]

  @@map("users")
}

model ResetPasswordToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.Uuid
  expiresIn DateTime
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("reset_password_tokens")
}

model Debtor {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.Uuid
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("debtors")
}

model CreditCard {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  bills     Bill[]

  @@map("credit_cards")
}

model Bill {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  creditCard          CreditCard?  @relation(fields: [creditCardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creditCardId        String       @db.Uuid
  user                User?        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              String       @db.Uuid
  month               Int
  year                Int
  date                DateTime
  totalAmount         Int
  installment         Int?
  totalOfInstallments Int?
  description         String?
  paid                Boolean      @default(false)
  category            BillCategory @default(OTHERS)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now()) @updatedAt

  @@map("bills")
}

enum BillCategory {
  HOUSE
  EDUCATION
  ELECTRONICS
  LEISURE
  OTHERS
  RESTAURANT
  HEALTH
  SERVICES
  SUPERMARKET
  TRANSPORT
  CLOTHING
  TRAVEL
}
